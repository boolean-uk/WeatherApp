{"ast":null,"code":"import _slicedToArray from \"/Users/mu.../Documents/Boolean/React/WeatherApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/mu.../Documents/Boolean/React/WeatherApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport WeatherHome from \"./components/WeatherHomeScreen\";\nimport \"./components/styles/style.css\";\nimport { useEffect, useState } from \"react\"; // import { query } from \"express\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //   const [weather, setWeather] = useState([]);\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1]; // this can go directly in the form for the search bar\n\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentLocation = _useState4[0],\n      setCurrentLocation = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentCity = _useState6[0],\n      setCurrentCity = _useState6[1];\n\n  var api = {\n    key: \"cd51bfb08430241168a813edfe9e9d8f\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n  }; // when the user types a new location, you use setLocation to store the state and present it to the user\n  // when user presses enter or clicks the search button you call setCurrentLocation\n\n  useEffect(function () {\n    //   if currentLocation is not empty -> then do a fetch to the API\n    // console.log(search);\n    if (currentCity !== \"\") {\n      // fetch\n      var url = \"\".concat(api.base, \"weather?q=\").concat(currentCity, \"&units=metric&APPID=\").concat(api.key);\n      console.log(url);\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (data) {\n        setSearch(data); //   setSearch(\"\");\n      });\n    }\n  }, [currentCity]);\n  console.log(currentCity);\n  console.log(search);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WeatherHome // weather={weather}\n    // setWeather={setWeather}\n    , {\n      search: search // setSearch={setSearch}\n      // SearchWeatherLocation={SearchWeatherLocation}\n      ,\n      currentLocation: currentLocation,\n      setCurrentLocation: setCurrentLocation // currentCity={currentCity}\n      ,\n      setCurrentCity: setCurrentCity\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"8f1lFySSRQq8yGZBuql6dRq4w3k=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["WeatherHome","useEffect","useState","App","search","setSearch","currentLocation","setCurrentLocation","currentCity","setCurrentCity","api","key","base","url","console","log","fetch","then","res","json","data"],"sources":["/Users/mu.../Documents/Boolean/React/WeatherApp/src/App.js"],"sourcesContent":["import WeatherHome from \"./components/WeatherHomeScreen\";\nimport \"./components/styles/style.css\";\nimport { useEffect, useState } from \"react\";\n// import { query } from \"express\";\n\nexport default function App() {\n  //   const [weather, setWeather] = useState([]);\n  const [search, setSearch] = useState([]); // this can go directly in the form for the search bar\n  const [currentLocation, setCurrentLocation] = useState(\"\");\n  const [currentCity, setCurrentCity] = useState(\"\");\n\n  const api = {\n    key: \"cd51bfb08430241168a813edfe9e9d8f\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n  };\n\n  // when the user types a new location, you use setLocation to store the state and present it to the user\n  // when user presses enter or clicks the search button you call setCurrentLocation\n\n  useEffect(() => {\n    //   if currentLocation is not empty -> then do a fetch to the API\n    // console.log(search);\n    if (currentCity !== \"\") {\n      // fetch\n      const url = `${api.base}weather?q=${currentCity}&units=metric&APPID=${api.key}`;\n      console.log(url);\n      fetch(url)\n        .then((res) => res.json())\n        .then((data) => {\n          setSearch(data);\n          //   setSearch(\"\");\n        });\n    }\n  }, [currentCity]);\n\n  console.log(currentCity);\n  console.log(search);\n\n  return (\n    <>\n      <WeatherHome\n        // weather={weather}\n        // setWeather={setWeather}\n        search={search}\n        // setSearch={setSearch}\n        // SearchWeatherLocation={SearchWeatherLocation}\n        currentLocation={currentLocation}\n        setCurrentLocation={setCurrentLocation}\n        // currentCity={currentCity}\n        setCurrentCity={setCurrentCity}\n      />\n      <main></main>\n    </>\n  );\n}\n"],"mappings":";;;;;AAAA,OAAOA,WAAP,MAAwB,gCAAxB;AACA,OAAO,+BAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CACA;;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC5B;EACA,gBAA4BD,QAAQ,CAAC,EAAD,CAApC;EAAA;EAAA,IAAOE,MAAP;EAAA,IAAeC,SAAf,iBAF4B,CAEc;;;EAC1C,iBAA8CH,QAAQ,CAAC,EAAD,CAAtD;EAAA;EAAA,IAAOI,eAAP;EAAA,IAAwBC,kBAAxB;;EACA,iBAAsCL,QAAQ,CAAC,EAAD,CAA9C;EAAA;EAAA,IAAOM,WAAP;EAAA,IAAoBC,cAApB;;EAEA,IAAMC,GAAG,GAAG;IACVC,GAAG,EAAE,kCADK;IAEVC,IAAI,EAAE;EAFI,CAAZ,CAN4B,CAW5B;EACA;;EAEAX,SAAS,CAAC,YAAM;IACd;IACA;IACA,IAAIO,WAAW,KAAK,EAApB,EAAwB;MACtB;MACA,IAAMK,GAAG,aAAMH,GAAG,CAACE,IAAV,uBAA2BJ,WAA3B,iCAA6DE,GAAG,CAACC,GAAjE,CAAT;MACAG,OAAO,CAACC,GAAR,CAAYF,GAAZ;MACAG,KAAK,CAACH,GAAD,CAAL,CACGI,IADH,CACQ,UAACC,GAAD;QAAA,OAASA,GAAG,CAACC,IAAJ,EAAT;MAAA,CADR,EAEGF,IAFH,CAEQ,UAACG,IAAD,EAAU;QACdf,SAAS,CAACe,IAAD,CAAT,CADc,CAEd;MACD,CALH;IAMD;EACF,CAdQ,EAcN,CAACZ,WAAD,CAdM,CAAT;EAgBAM,OAAO,CAACC,GAAR,CAAYP,WAAZ;EACAM,OAAO,CAACC,GAAR,CAAYX,MAAZ;EAEA,oBACE;IAAA,wBACE,QAAC,WAAD,CACE;IACA;IAFF;MAGE,MAAM,EAAEA,MAHV,CAIE;MACA;MALF;MAME,eAAe,EAAEE,eANnB;MAOE,kBAAkB,EAAEC,kBAPtB,CAQE;MARF;MASE,cAAc,EAAEE;IATlB;MAAA;MAAA;MAAA;IAAA,QADF,eAYE;MAAA;MAAA;MAAA;IAAA,QAZF;EAAA,gBADF;AAgBD;;GAjDuBN,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}