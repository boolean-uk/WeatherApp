{"ast":null,"code":"import _slicedToArray from \"/Users/mu.../Documents/Boolean/React/WeatherApp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/mu.../Documents/Boolean/React/WeatherApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport WeatherHome from \"./components/WeatherHomeScreen\";\nimport \"./components/styles/style.css\";\nimport { useEffect, useState } from \"react\"; // import { query } from \"express\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  //   const [weather, setWeather] = useState([]);\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1]; // this can go directly in the form for the search bar\n\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentLocation = _useState4[0],\n      setCurrentLocation = _useState4[1];\n\n  var api = {\n    key: \"cd51bfb08430241168a813edfe9e9d8f\",\n    base: \"https://api.openweathermap.org/data/2.5/\"\n  }; // when the user types a new location, you use setLocation to store the state and present it to the user\n  // when user presses enter or clicks the search button you call setCurrentLocation\n\n  useEffect(function () {\n    //   if currentLocation is not empty -> then do a fetch to the API\n    if (!currentLocation === \"\") {\n      console.log(search); // fetch\n\n      var url = \"\".concat(api.base, \"weather?q=\").concat(search, \"&units=metric&APPID=\").concat(api.key);\n      console.log(url);\n      fetch(url).then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        setSearch(result);\n        console.log(result); //   setSearch(\"\");\n      });\n    }\n  }, [currentLocation]); //   console.log(currentLocation);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(WeatherHome // weather={weather}\n    // setWeather={setWeather}\n    , {\n      search: search // setSearch={setSearch}\n      // SearchWeatherLocation={SearchWeatherLocation}\n      ,\n      currentLocation: currentLocation,\n      setCurrentLocation: setCurrentLocation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"odojTOjj29QCvc3ttmVjan8+S1s=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["WeatherHome","useEffect","useState","App","search","setSearch","currentLocation","setCurrentLocation","api","key","base","console","log","url","fetch","then","res","json","result"],"sources":["/Users/mu.../Documents/Boolean/React/WeatherApp/src/App.js"],"sourcesContent":["import WeatherHome from \"./components/WeatherHomeScreen\";\nimport \"./components/styles/style.css\";\nimport { useEffect, useState } from \"react\";\n// import { query } from \"express\";\n\nexport default function App() {\n  //   const [weather, setWeather] = useState([]);\n  const [search, setSearch] = useState(\"\"); // this can go directly in the form for the search bar\n  const [currentLocation, setCurrentLocation] = useState(\"\");\n\n  const api = {\n    key: \"cd51bfb08430241168a813edfe9e9d8f\",\n    base: \"https://api.openweathermap.org/data/2.5/\",\n  };\n\n  // when the user types a new location, you use setLocation to store the state and present it to the user\n  // when user presses enter or clicks the search button you call setCurrentLocation\n\n  useEffect(() => {\n    //   if currentLocation is not empty -> then do a fetch to the API\n    if (!currentLocation === \"\") {\n      console.log(search);\n\n      // fetch\n      const url = `${api.base}weather?q=${search}&units=metric&APPID=${api.key}`;\n      console.log(url);\n      fetch(url)\n        .then((res) => res.json())\n        .then((result) => {\n          setSearch(result);\n          console.log(result);\n          //   setSearch(\"\");\n        });\n    }\n  }, [currentLocation]);\n\n  //   console.log(currentLocation);\n\n  return (\n    <>\n      <WeatherHome\n        // weather={weather}\n        // setWeather={setWeather}\n        search={search}\n        // setSearch={setSearch}\n        // SearchWeatherLocation={SearchWeatherLocation}\n        currentLocation={currentLocation}\n        setCurrentLocation={setCurrentLocation}\n      />\n      <main></main>\n    </>\n  );\n}\n"],"mappings":";;;;;AAAA,OAAOA,WAAP,MAAwB,gCAAxB;AACA,OAAO,+BAAP;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC,C,CACA;;;;AAEA,eAAe,SAASC,GAAT,GAAe;EAAA;;EAC5B;EACA,gBAA4BD,QAAQ,CAAC,EAAD,CAApC;EAAA;EAAA,IAAOE,MAAP;EAAA,IAAeC,SAAf,iBAF4B,CAEc;;;EAC1C,iBAA8CH,QAAQ,CAAC,EAAD,CAAtD;EAAA;EAAA,IAAOI,eAAP;EAAA,IAAwBC,kBAAxB;;EAEA,IAAMC,GAAG,GAAG;IACVC,GAAG,EAAE,kCADK;IAEVC,IAAI,EAAE;EAFI,CAAZ,CAL4B,CAU5B;EACA;;EAEAT,SAAS,CAAC,YAAM;IACd;IACA,IAAI,CAACK,eAAD,KAAqB,EAAzB,EAA6B;MAC3BK,OAAO,CAACC,GAAR,CAAYR,MAAZ,EAD2B,CAG3B;;MACA,IAAMS,GAAG,aAAML,GAAG,CAACE,IAAV,uBAA2BN,MAA3B,iCAAwDI,GAAG,CAACC,GAA5D,CAAT;MACAE,OAAO,CAACC,GAAR,CAAYC,GAAZ;MACAC,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQ,UAACC,GAAD;QAAA,OAASA,GAAG,CAACC,IAAJ,EAAT;MAAA,CADR,EAEGF,IAFH,CAEQ,UAACG,MAAD,EAAY;QAChBb,SAAS,CAACa,MAAD,CAAT;QACAP,OAAO,CAACC,GAAR,CAAYM,MAAZ,EAFgB,CAGhB;MACD,CANH;IAOD;EACF,CAhBQ,EAgBN,CAACZ,eAAD,CAhBM,CAAT,CAb4B,CA+B5B;;EAEA,oBACE;IAAA,wBACE,QAAC,WAAD,CACE;IACA;IAFF;MAGE,MAAM,EAAEF,MAHV,CAIE;MACA;MALF;MAME,eAAe,EAAEE,eANnB;MAOE,kBAAkB,EAAEC;IAPtB;MAAA;MAAA;MAAA;IAAA,QADF,eAUE;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA,gBADF;AAcD;;GA/CuBJ,G;;KAAAA,G"},"metadata":{},"sourceType":"module"}