{"ast":null,"code":"/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs'; // See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\n\nvar minNodeVersion = process && process.env && process.env.YARGS_MIN_NODE_VERSION ? Number(process.env.YARGS_MIN_NODE_VERSION) : 12;\n\nif (process && process.version) {\n  var major = Number(process.version.match(/v([^.]+)/)[1]);\n\n  if (major < minNodeVersion) {\n    throw Error(\"yargs parser supports a minimum Node.js version of \".concat(minNodeVersion, \". Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions\"));\n  }\n} // Creates a yargs-parser instance using Node.js standard libraries:\n\n\nvar _env = process ? process.env : {};\n\nvar parser = new YargsParser({\n  cwd: process.cwd,\n  env: function env() {\n    return _env;\n  },\n  format: format,\n  normalize: normalize,\n  resolve: resolve,\n  // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n  // we can exercise all the lines below:\n  require: function (_require) {\n    function require(_x) {\n      return _require.apply(this, arguments);\n    }\n\n    require.toString = function () {\n      return _require.toString();\n    };\n\n    return require;\n  }(function (path) {\n    if (typeof require !== 'undefined') {\n      return require(path);\n    } else if (path.match(/\\.json$/)) {\n      // Addresses: https://github.com/yargs/yargs/issues/2040\n      return JSON.parse(readFileSync(path, 'utf8'));\n    } else {\n      throw Error('only .json config files are supported in ESM');\n    }\n  })\n});\n\nvar yargsParser = function Parser(args, opts) {\n  var result = parser.parse(args.slice(), opts);\n  return result.argv;\n};\n\nyargsParser.detailed = function (args, opts) {\n  return parser.parse(args.slice(), opts);\n};\n\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;","map":{"version":3,"names":["format","normalize","resolve","camelCase","decamelize","looksLikeNumber","YargsParser","readFileSync","minNodeVersion","process","env","YARGS_MIN_NODE_VERSION","Number","version","major","match","Error","parser","cwd","require","path","JSON","parse","yargsParser","Parser","args","opts","result","slice","argv","detailed"],"sources":["/Users/mu.../Documents/Boolean/React/WeatherApp/node_modules/yargs-parser/build/lib/index.js"],"sourcesContent":["/**\n * @fileoverview Main entrypoint for libraries using yargs-parser in Node.js\n * CJS and ESM environments.\n *\n * @license\n * Copyright (c) 2016, Contributors\n * SPDX-License-Identifier: ISC\n */\nimport { format } from 'util';\nimport { normalize, resolve } from 'path';\nimport { camelCase, decamelize, looksLikeNumber } from './string-utils.js';\nimport { YargsParser } from './yargs-parser.js';\nimport { readFileSync } from 'fs';\n// See https://github.com/yargs/yargs-parser#supported-nodejs-versions for our\n// version support policy. The YARGS_MIN_NODE_VERSION is used for testing only.\nconst minNodeVersion = (process && process.env && process.env.YARGS_MIN_NODE_VERSION)\n    ? Number(process.env.YARGS_MIN_NODE_VERSION)\n    : 12;\nif (process && process.version) {\n    const major = Number(process.version.match(/v([^.]+)/)[1]);\n    if (major < minNodeVersion) {\n        throw Error(`yargs parser supports a minimum Node.js version of ${minNodeVersion}. Read our version support policy: https://github.com/yargs/yargs-parser#supported-nodejs-versions`);\n    }\n}\n// Creates a yargs-parser instance using Node.js standard libraries:\nconst env = process ? process.env : {};\nconst parser = new YargsParser({\n    cwd: process.cwd,\n    env: () => {\n        return env;\n    },\n    format,\n    normalize,\n    resolve,\n    // TODO: figure  out a  way to combine ESM and CJS coverage, such  that\n    // we can exercise all the lines below:\n    require: (path) => {\n        if (typeof require !== 'undefined') {\n            return require(path);\n        }\n        else if (path.match(/\\.json$/)) {\n            // Addresses: https://github.com/yargs/yargs/issues/2040\n            return JSON.parse(readFileSync(path, 'utf8'));\n        }\n        else {\n            throw Error('only .json config files are supported in ESM');\n        }\n    }\n});\nconst yargsParser = function Parser(args, opts) {\n    const result = parser.parse(args.slice(), opts);\n    return result.argv;\n};\nyargsParser.detailed = function (args, opts) {\n    return parser.parse(args.slice(), opts);\n};\nyargsParser.camelCase = camelCase;\nyargsParser.decamelize = decamelize;\nyargsParser.looksLikeNumber = looksLikeNumber;\nexport default yargsParser;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,MAAvB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,MAAnC;AACA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,eAAhC,QAAuD,mBAAvD;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,YAAT,QAA6B,IAA7B,C,CACA;AACA;;AACA,IAAMC,cAAc,GAAIC,OAAO,IAAIA,OAAO,CAACC,GAAnB,IAA0BD,OAAO,CAACC,GAAR,CAAYC,sBAAvC,GACjBC,MAAM,CAACH,OAAO,CAACC,GAAR,CAAYC,sBAAb,CADW,GAEjB,EAFN;;AAGA,IAAIF,OAAO,IAAIA,OAAO,CAACI,OAAvB,EAAgC;EAC5B,IAAMC,KAAK,GAAGF,MAAM,CAACH,OAAO,CAACI,OAAR,CAAgBE,KAAhB,CAAsB,UAAtB,EAAkC,CAAlC,CAAD,CAApB;;EACA,IAAID,KAAK,GAAGN,cAAZ,EAA4B;IACxB,MAAMQ,KAAK,8DAAuDR,cAAvD,wGAAX;EACH;AACJ,C,CACD;;;AACA,IAAME,IAAG,GAAGD,OAAO,GAAGA,OAAO,CAACC,GAAX,GAAiB,EAApC;;AACA,IAAMO,MAAM,GAAG,IAAIX,WAAJ,CAAgB;EAC3BY,GAAG,EAAET,OAAO,CAACS,GADc;EAE3BR,GAAG,EAAE,eAAM;IACP,OAAOA,IAAP;EACH,CAJ0B;EAK3BV,MAAM,EAANA,MAL2B;EAM3BC,SAAS,EAATA,SAN2B;EAO3BC,OAAO,EAAPA,OAP2B;EAQ3B;EACA;EACAiB,OAAO;IAAA;MAAA;IAAA;;IAAA;MAAA;IAAA;;IAAA;EAAA,EAAE,UAACC,IAAD,EAAU;IACf,IAAI,OAAOD,OAAP,KAAmB,WAAvB,EAAoC;MAChC,OAAOA,OAAO,CAACC,IAAD,CAAd;IACH,CAFD,MAGK,IAAIA,IAAI,CAACL,KAAL,CAAW,SAAX,CAAJ,EAA2B;MAC5B;MACA,OAAOM,IAAI,CAACC,KAAL,CAAWf,YAAY,CAACa,IAAD,EAAO,MAAP,CAAvB,CAAP;IACH,CAHI,MAIA;MACD,MAAMJ,KAAK,CAAC,8CAAD,CAAX;IACH;EACJ,CAXM;AAVoB,CAAhB,CAAf;;AAuBA,IAAMO,WAAW,GAAG,SAASC,MAAT,CAAgBC,IAAhB,EAAsBC,IAAtB,EAA4B;EAC5C,IAAMC,MAAM,GAAGV,MAAM,CAACK,KAAP,CAAaG,IAAI,CAACG,KAAL,EAAb,EAA2BF,IAA3B,CAAf;EACA,OAAOC,MAAM,CAACE,IAAd;AACH,CAHD;;AAIAN,WAAW,CAACO,QAAZ,GAAuB,UAAUL,IAAV,EAAgBC,IAAhB,EAAsB;EACzC,OAAOT,MAAM,CAACK,KAAP,CAAaG,IAAI,CAACG,KAAL,EAAb,EAA2BF,IAA3B,CAAP;AACH,CAFD;;AAGAH,WAAW,CAACpB,SAAZ,GAAwBA,SAAxB;AACAoB,WAAW,CAACnB,UAAZ,GAAyBA,UAAzB;AACAmB,WAAW,CAAClB,eAAZ,GAA8BA,eAA9B;AACA,eAAekB,WAAf"},"metadata":{},"sourceType":"module"}